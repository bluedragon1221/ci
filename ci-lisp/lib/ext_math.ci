("Point-Free stuff")
((def ((doc "Create the composition f(g(x)) from function arguments g and f") (fn 'g (fn 'f (fn 'x (f (g x))))))) 'compose)
((def (fn 'f (fn 'g ((compose g) f)))) 'pipe)

((def (fn 'a (fn 'x a))) 'const)
((def (fn 'x x)) 'id)

((def (fn 'f
    ((fn 'x (f (fn 'v ((x x) v))))
     (fn 'x (f (fn 'v ((x x) v)))))
  ))
'Z)

("== Booleans")
((def (fn 'x (((if x) nil) t))) 'not)

("== Cons pairs")
((def ((doc "Creates a new pair, given two elements") (fn 'b (fn 'a (fn 'u ((u a) b)))))) 'cons)
((def ((doc "Gets the first element of a given pair") (fn 'p (p (fn 'car_x (fn 'y car_x)))))) 'car)
((def ((doc "Gets the second/last element of a given pair") (fn 'p (p (fn 'cdr_x (fn 'y y)))))) 'cdr)
((def ((doc "Reverses a given pair. `{a : b}` => `{b : a}`") (fn 'p ((cons (car p)) (cdr p))))) 'swap)

((def ((doc "Formats a pair as a string to view its contents") (fn 'p {"{" str_concat {(car p) str_concat {" : " str_concat {(cdr p) str_concat "}"}}}}))) 'fmt_pair)

("== Fractions")
((def (Z (fn 'divmod_inner (fn 'q (fn 'divisor (fn 'dividend
 ((((if {dividend < divisor})
    (fn '_ {q cons dividend}))
    (fn '_ (((divmod_inner (inc q)) divisor) {dividend sub divisor})))
  nil)
)))))) 'divmod_inner)
((def ((doc "Given an integer dividend and divisor, compute their quotient and remainder, returned as a tuple {quotient : remainder}") (divmod_inner 0))) 'divmod)

((def (fn 'b (fn 'a (car {a divmod b})))) 'div)
((def (fn 'b (fn 'a (cdr {a divmod b})))) 'mod)

((def (Z (fn 'gcd (fn 'a (fn 'b
  ((((if {b eq 0})
     (fn '_ a))
     (fn '_ ((gcd b) {a mod b})))
   nil)
))))) 'gcd)

((def ((doc "Create a new fraction, given a numerator and denominator") (fn 'd (fn 'n {'frac cons {n cons d}})))) 'frac)
((def ((compose car) (eq 'frac)) 'is_frac)

((def ((compose cdr) car)) 'num)
((def ((compose cdr) cdr)) 'denom)

((def ((doc "Add two fractions") (fn 'a (fn 'b
  {{(num a) add (num b)} frac {(denom a) mul (denom b)}}
)))) 'fadd)

((def ((doc "Multiply two fractions") (fn 'a (fn 'b
  {{(num a) mul (num b)} frac {(denom a) mul (denom b)}}
)))) 'fmul)

((def ((doc "Simplify a fraction") (fn 'f ((fn 's
  {(s (num f)) frac (s (denom f))}
) (div ((gcd (num f)) (denom f))))))) 'fsimplify)

((def ((doc "Format a fraction as a string to view its contents") (fn 'f {(num f) str_concat {"/" str_concat (denom f)}}))) 'fmt_frac)

("== Lists")
("use [1 2 3] to make a list")

((def ((doc "Get the nth item of a list. List indices start at 0") (Z (fn 'nth (fn 'n (fn 'list
  ((((if {n eq 0})
    (fn '_ (car list)))
    (fn '_ ((nth (dec n)) (cdr list))))
  nil)
)))))) 'nth)

((def (Z (fn 'fmt_list_inner (fn 'acc (fn 'lst
  (
    (((if (not lst))
      (fn '_ acc))
      (fn '_ ((fmt_list_inner {acc str_concat {" " str_concat (car lst)}}) (cdr lst)))) 
  nil)
))))) 'fmt_list_inner)
((def ((doc "Format a list as a string to view its contents") ((compose (fmt_list_inner "[")) (str_concat " ]")))) 'fmt_list)
