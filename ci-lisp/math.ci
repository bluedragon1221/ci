((def def) '=)

("== Addition and Subtraction")

((def (fn 'a (fn 'b
  ((((if ((eq b) 0))
     (fn '_ a))
     (fn '_ ((add (inc a)) (dec b))))
    nil))))
  'add)

((def (fn 'b (fn 'a
  ((((if ((eq b) 0))
     (fn '_ a))
     (fn '_ ((sub (dec b)) (dec a))))
    nil))))
  'sub)

((def (fn 'a (fn 'b
  ((((if ((eq b) 0))
     (fn '_ 0))
     (fn '_ ((add a) ((mul a) (dec b)))))
   nil))))
 'mul)

((def add) '+)
((def sub) '-)
((def mul) '*)

{ 'sqr = (fn 'a ((mul a) a)) }

("recursively call this function with an integer argument, then call it with nil to get the sum of those integers")
((def
  (fn 'sum
    (fn 'next
      ((((if ((eq next) nil))
         (fn '_ sum))
         (fn '_ ((vadd ((add sum) next)))))
       nil))))
'vadd)

("== Cons pairs")

{ 'cons = (fn 'b (fn 'a (fn 'u ((u a) b)))) }
((def cons) ':)

{ 'car = (fn 'p (p (fn 'x (fn 'y x)))) }
{ 'cdr = (fn 'p (p (fn 'x (fn 'y y)))) }

{ 'swap = (fn 'p {(cdr p) : (car p)}) }

("== Lists")

("Currently crashes, not sure why")
((def
 (fn 'list
   (fn 'acc
     (((((if ((eq list) nil))
        (fn '_ acc))
        (fn '_ ((reverse (cdr list)) ({(car list) : acc})))))
      nil))))
 'reverse)

((def (fn 'n (fn 'list
  ((((if ((eq n) 0))
     (fn '_ (car list)))
     (fn '_ ((nth (dec n)) (cdr list))))
   nil))))
'nth)

("== Function helpers")

((def (fn 'f (fn 'g (fn 'x (g (f x)))))) 'compose)
((def compose) '.)
